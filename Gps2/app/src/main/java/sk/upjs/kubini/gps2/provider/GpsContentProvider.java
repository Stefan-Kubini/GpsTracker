package sk.upjs.kubini.gps2.provider;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;
import android.provider.ContactsContract;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import java.util.Date;

import static android.content.ContentResolver.SCHEME_CONTENT;
import static sk.upjs.kubini.gps2.provider.Defaults.ALL_COLUMNS;
import static sk.upjs.kubini.gps2.provider.Defaults.AUTOGENERATED_ID;
import static sk.upjs.kubini.gps2.provider.Defaults.NO_CONTENT_OBSERVER;
import static sk.upjs.kubini.gps2.provider.Defaults.NO_GROUP_BY;
import static sk.upjs.kubini.gps2.provider.Defaults.NO_HAVING;
import static sk.upjs.kubini.gps2.provider.Defaults.NO_NULL_COLUMN_HACK;
import static sk.upjs.kubini.gps2.provider.Defaults.NO_SELECTION;
import static sk.upjs.kubini.gps2.provider.Defaults.NO_SELECTION_ARGS;
import static sk.upjs.kubini.gps2.provider.Defaults.NO_SORT_ORDER;
import static sk.upjs.kubini.gps2.provider.Defaults.NO_TYPE;

public class GpsContentProvider extends ContentProvider {
    public static final String AUTHORITY = "sk.upjs.kubini.gps2.provider.GpsContentProvider";

    public static final Uri CONTENT_URI = new Uri.Builder()
            .scheme(SCHEME_CONTENT)
            .authority(AUTHORITY)
            .appendPath("GPS1")
            .build();

    private static final int URI_GPS1_ALL = 0;
    private static final int URI_GPS1_ID = 1;
    private static final int URI_GPS2_ID = 2;

    private static final String MIME_GPS1_ALL = ContentResolver.CURSOR_DIR_BASE_TYPE + "/vnd." + AUTHORITY + "." + "GPS1";
    private static final String MIME_GPS1_ID = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." + "GPS1";
    private static final String MIME_GPS2_ID = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + "." + "GPS2";

    private UriMatcher uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
    private DatabaseOpenHelper databaseHelper;

    @Override
    public boolean onCreate() {
        uriMatcher.addURI(AUTHORITY, "GPS1", URI_GPS1_ALL);
        uriMatcher.addURI(AUTHORITY, "GPS1" + "/#", URI_GPS1_ID);
        uriMatcher.addURI(AUTHORITY, "GPS2", URI_GPS2_ID);

        this.databaseHelper = new DatabaseOpenHelper(getContext());
        return true;
    }
    @Nullable
    @Override
    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {
        Cursor cursor = null;
        long id;
        switch(uriMatcher.match(uri)) {
            case URI_GPS1_ALL:
                cursor = listGPS1();
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_GPS1_ID:
                id = ContentUris.parseId(uri);
                cursor = findGPS1ById(id);
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            case URI_GPS2_ID:
                id = ContentUris.parseId(uri);
                cursor = findGPS1ById(id);
                cursor.setNotificationUri(getContext().getContentResolver(), uri);
                return cursor;
            default:
                return Defaults.NO_CURSOR;
        }
    }
    private Cursor findGPS1ById(long id) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        String selection = "_ID=" + id;
        return db.query("GPS1", ALL_COLUMNS, selection, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }
    private Cursor listGPS1() {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        return db.query("GPS1", ALL_COLUMNS, NO_SELECTION, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, NO_SORT_ORDER);
    }
    private Cursor getNextPor_GPS2(long id) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        String selection = "_ID=" + id;
        return db.rawQuery("select MAX(Por) as Por from GPS2 where _ID=" + id, null);
    }
    private Cursor listGPS2(long id) {
        SQLiteDatabase db = databaseHelper.getReadableDatabase();
        String selection = "_ID=" + id;
        return db.query("GPS2", ALL_COLUMNS, selection, NO_SELECTION_ARGS, NO_GROUP_BY, NO_HAVING, "Por");
    }
    @Nullable
    @Override
    public String getType(@NonNull Uri uri) {
        switch(uriMatcher.match(uri)) {
            case URI_GPS1_ALL:
                return MIME_GPS1_ALL;
            case URI_GPS1_ID:
                return MIME_GPS1_ID;
            case URI_GPS2_ID:
                return MIME_GPS2_ID;
        }
        return NO_TYPE;
    }
    @Nullable
    @Override
    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
        switch(uriMatcher.match(uri)) {
            case URI_GPS1_ALL:
                Uri newItemUri = saveNote(values);
                getContext().getContentResolver().notifyChange(CONTENT_URI, NO_CONTENT_OBSERVER);
                return newItemUri;
            default:
                return Defaults.NO_URI;
        }
    }
    private Uri saveNote(ContentValues values) {
        ContentValues note = new ContentValues();
        note.put("_ID", AUTOGENERATED_ID);
        note.put("Nazov", values.getAsString("Nazov"));
        note.put("TimeStamp", new Date().getTime() / 1000);

        SQLiteDatabase db = databaseHelper.getWritableDatabase();
        long newId = db.insert("GPS1", NO_NULL_COLUMN_HACK, note);
        return ContentUris.withAppendedId(CONTENT_URI, newId);
    }
    @Override
    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
        return 0;
    }
    @Override
    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) {
        return 0;
    }
}
